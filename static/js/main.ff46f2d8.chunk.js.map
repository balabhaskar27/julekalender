{"version":3,"sources":["sanity.js","Forside.js","Luke.js","About.js","App.js","serviceWorker.js","index.js","assets/logo-offer.png"],"names":["client","require","sanityClient","projectId","dataset","useCdn","Forside","posts","arr","Array","className","map","_","i","console","log","post","cl","to","slug","current","title","BlockContent","builder","imageUrlBuilder","serializers","types","code","props","data-language","node","language","Luke","source","nr","useState","detaljertTekst","setDetaljertTekst","find","lukenr","parseInt","blocks","body","imageOptions","w","solution","onClick","id","data-toggle","href","role","aria-expanded","aria-controls","src","mainImage","image","width","url","params","particles","number","value","density","enable","value_area","color","shape","type","stroke","polygon","nb_sides","height","opacity","random","anim","speed","opacity_min","sync","size","size_min","line_linked","distance","move","direction","straight","out_mode","bounce","attract","rotateX","rotateY","retina_detect","About","about","setAbout","useEffect","fetch","then","res","catch","err","error","header","App","now","Date","toISOString","setPosts","date","setDate","query","response","json","datetime","split","postsSorted","sort","a","b","aint","bint","basename","process","logo","data-target","aria-label","exact","path","component","match","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.ff46f2d8.chunk.js","sourcesContent":["const sanityClient = require('@sanity/client');\n\nexport const client = sanityClient({\n    projectId: 'jraodywc',\n    dataset: 'production',\n    useCdn: true,\n});\n","import React, { useState, useEffect } from 'react';\nimport { client } from './sanity.js';\nimport {\n  Link\n} from \"react-router-dom\";\n\nfunction Forside( { posts }) {\n\n  const arr = [...Array(24)];\n\n  return (\n    <div className=\"grid-container luke-bakgrunn\">\n      {arr.map((_, i) => {\n        console.log(\"SEPP)\")\n        const post = posts[i];\n        const cl = i % 2 === 0 ? \"even\" : \"odd\";\n\n        if (post) {\n          return (<div className={\"post-element \" + cl}>\n            <Link className=\"link-luke\" to={\"/luke/\" + post.slug.current}>\n              <div className={`nummer-${cl}`}>{post.title}</div>\n            </Link>\n          </div>)\n        }\n          else {\n          return (<div className={\"post-element disabled\"}>\n              <div className={`nummer-${cl}-disabled`}>{i+1}</div>\n          </div>)\n          }\n        })}\n    </div>\n  );\n}\n\nexport default Forside;\n","import React, { useState, useEffect } from 'react';\nimport imageUrlBuilder from '@sanity/image-url';\nimport { client } from './sanity';\nimport Particles from 'react-particles-js';\nconst BlockContent = require('@sanity/block-content-to-react');\n\n// Get a pre-configured url-builder from your sanity client\nconst builder = imageUrlBuilder(client);\n\n// Then we like to make a simple function like this that gives the\n// builder an image and returns the builder for you to specify additional\n// parameters:\nfunction urlFor(source) {\n  return builder.image(source)\n}\n\n\n\nconst serializers = {\n  types: {\n    code: props => (\n      <pre data-language={props.node.language}>\n        <code>{props.node.code}</code>\n      </pre>\n    )\n  }\n};\n\nfunction Luke( { nr, posts }) {\n\n  const [detaljertTekst, setDetaljertTekst] = useState(\"Vis løsning\");\n\n  const toggleTekst = () => {\n    if (detaljertTekst === \"Vis løsning\") {\n      setDetaljertTekst(\"Skjul løsning\");\n    } else {\n      setDetaljertTekst(\"Vis løsning\")\n    }\n  };\n\n  const post = posts.find(post => post.slug.current == nr);\n\n  if (!post) {\n    const lukenr = (parseInt(nr, 10));\n    if (lukenr > 0 && lukenr < 25) return <h3 className=\"notfound\">Du må nok vente litt.</h3>;\n    return <h3 className=\"notfound\">Denne luken finnes ikke.</h3>\n  }\n\n  console.log(\"POST\", post);\n\n  return (\n    <div className=\"luke-side\">\n      <div className=\"oppgave-del\">\n    <h1>Luke {post.title}</h1>\n      <div className=\"oppgavetekst\">\n        <BlockContent\n          blocks={post.body}\n          serializers={serializers}\n          imageOptions={{w: 500}}\n          projectId=\"jraodywc\"\n          dataset=\"production\"\n        />\n      </div>\n      <div>\n        {post.solution ?\n          <div className=\"løsningwrapper\">\n          <a onClick={() => toggleTekst()} id=\"solutionButton\" className=\"btn btn-primary\" data-toggle=\"collapse\" href=\"#løsning\" role=\"button\"\n             aria-expanded=\"false\" aria-controls=\"collapseExample\">\n            {detaljertTekst}\n          </a>\n          <div className=\"collapse\" id=\"løsning\">\n            <div className=\"card card-body\">\n              <BlockContent\n                blocks={post.solution}\n                serializers={serializers}\n                imageOptions={{w: 500}}\n                projectId=\"jraodywc\"\n                dataset=\"production\"\n              />\n            </div>\n          </div>\n        </div> : null}\n      </div>\n      <img className=\"oppgavebilde\" src={urlFor(post.mainImage).width(400).url()} />\n      </div>\n        <Particles\n          className=\"partikler\"\n          params={{\n            particles: {\n              number: {\n                value: 52,\n                density: {\n                  enable: true,\n                  value_area: 631.3280775270874\n                }\n              },\n              color: {\n                value: \"#fff\"\n              },\n              shape: {\n                type: \"circle\",\n                stroke: {\n                  width: 0,\n                  color: \"#000000\"\n                },\n                polygon: {\n                  nb_sides: 5\n                },\n                image: {\n                  src: \"img/github.svg\",\n                  width: 100,\n                  height: 100\n                }\n              },\n              opacity: {\n                value: 0.5,\n                random: true,\n                anim: {\n                  enable: false,\n                  speed: 1,\n                  opacity_min: 0.1,\n                  sync: false\n                }\n              },\n              size: {\n                value: 5,\n                random: true,\n                anim: {\n                  enable: false,\n                  speed: 40,\n                  size_min: 0.1,\n                  sync: false\n                }\n              },\n              line_linked: {\n                enable: false,\n                distance: 500,\n                color: \"#ffffff\",\n                opacity: 0.4,\n                width: 2\n              },\n              move: {\n                enable: true,\n                speed: 1.5,\n                direction: \"bottom\",\n                random: false,\n                straight: false,\n                out_mode: \"out\",\n                bounce: false,\n                attract: {\n                  enable: false,\n                  rotateX: 600,\n                  rotateY: 1200\n                }\n              }\n            },\n            retina_detect: true\n          }} />\n    </div>\n);\n}\n\nexport default Luke;\n","import React, { useState, useEffect } from 'react';\nimport imageUrlBuilder from '@sanity/image-url';\nimport { client } from './sanity';\nconst BlockContent = require('@sanity/block-content-to-react');\n\nconst serializers = {\n  types: {\n    code: props => (\n      <pre data-language={props.node.language}>\n        <code>{props.node.code}</code>\n      </pre>\n    )\n  }\n};\n\nfunction About( { }) {\n  const query = `*[_type == $type][0]`;\n\n  const [about, setAbout] = useState({});\n\n  useEffect(() => {\n    const fetchAbout = () => {\n      client\n        .fetch(query, {\n          type: 'about',\n        })\n        .then((res) => {\n          setAbout(res);\n        })\n        .catch((err) => {\n          console.log('err', err);\n          console.error('Oh no, error occured: ', err);\n        });\n    };\n\n    fetchAbout();\n  }, []);\n\n  console.log(\"about\");\n  console.log(about);\n\n  return (\n    <div className=\"about\">\n      <h1>{about.header}</h1>\n      <div className=\"about-body\">\n        <BlockContent\n          blocks={about.body}\n          serializers={serializers}\n          imageOptions={{w: 500}}\n          projectId=\"jraodywc\"\n          dataset=\"production\"\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default About;\n","import React, { useState, useEffect } from 'react';\nimport Forside from './Forside';\nimport Luke from './Luke';\nimport About from './About';\nimport './App.scss';\nimport logo from './assets/logo-offer.png';\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport {client} from \"./sanity\";\n\nfunction App() {\n  const now = new Date().toISOString();\n\n  const [posts, setPosts] = useState([]);\n  const [date, setDate] = useState('');\n\n  console.log(posts);\n\n  const query = `*[_type == $type  && ((publishedAt <= \"${now}\"))]{author, body, mainImage, publishedAt, slug, title, solution}`;\n\n  useEffect(() => {\n    const fetchPosts = () => {\n      client\n        .fetch(query, {\n          type: 'post',\n        })\n        .then((res) => {\n          setPosts(res);\n        })\n        .catch((err) => {\n          console.log('err', err);\n          console.error('Oh no, error occured: ', err);\n        });\n    };\n    console.log(\"FETCHEEEEED\");\n    date && fetchPosts();\n  }, [date]);\n\n  useEffect(() => {\n    fetch('http://worldtimeapi.org/api/timezone/Europe/Amsterdam.json')\n      .then(response =>  response.json())\n      .then(res => {\n        setDate(res.datetime.split(\".\")[0]); //this is an asynchronous function\n      })\n  }, []);\n\n  console.log(now);\n  console.log(date);\n\n  function compare( a, b ) {\n    let aint = parseInt(a.title, 10);\n    let bint = parseInt(b.title, 10);\n\n    if ( aint < bint ){\n      return -1;\n    }\n    if ( aint > bint ){\n      return 1;\n    }\n    return 0;\n  }\n\n  const postsSorted = posts.sort(compare);\n\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <div className=\"App\">\n        <div className=\"main-container\">\n          <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n            <a href=\"#\"><img src={logo} height=\"50px;\"/></a>\n            <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNavAltMarkup\"\n                    aria-controls=\"navbarNavAltMarkup\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n              <span className=\"navbar-toggler-icon\"></span>\n            </button>\n            <div className=\"collapse navbar-collapse\" id=\"navbarNavAltMarkup\">\n              <ul className=\"nav navbar-nav\">\n                <li><Link className=\"nav-item nav-link\" to=\"/\">Luker</Link></li>\n                <li><Link className=\"nav-item nav-link\" to=\"/om\">Om</Link></li>\n              </ul>\n            </div>\n          </nav>\n          <Switch>\n            <Route exact path=\"/\">\n              <Forside posts={postsSorted} />\n            </Route>\n            <Route exact path=\"/om\">\n              <About />\n            </Route>\n            <Route path=\"/luke/:nr\" component={props => <Luke nr={props.match.params.nr} posts={posts} />}/>\n          </Switch>\n        </div>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo-offer.c4551d30.png\";"],"sourceRoot":""}